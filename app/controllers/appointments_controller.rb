#
# class AppointmentsController < ApplicationController
#   before_action :authenticate_user!, only: [:new, :create, :edit, :update, :destroy, :index]
#   before_action :set_problems, only: [:show, :edit, :update, :destroy]
#
#   # before_action :set_appointment, only: [:show, :edit, :update, :destroy]
#   # before_action :time_slot_available, only: [:new, :create]
#   def index
#     @appointments = current_user.appointments.includes(:doctor).all
#   end
#   def show
#     @appointment = Appointment.find(params[:id])
#   end
#
#   def new
#     @appointment = Appointment.new
#     @doctors = Doctor.all
#   end
#
#   def edit
#     @appointment = Appointment.find(params[:id])
#     @doctors = Doctor.all
#   end
#
#   def create
#       @appointment = current_user.appointments.build(appointment_params)
#       if @appointment.save
#         send_telegram_confirmation(@appointment)
#         schedule_appointment_reminder(@appointment)
#         redirect_to @appointment, notice: '–ó–∞–ø–∏—Å—å –Ω–∞ –ø—Ä–∏–µ–º —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞.'
#       else
#         Rails.logger.debug(@appointment.errors.full_messages)
#
#         msg = '–í—ã–±—Ä–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è —É–∂–µ –∑–∞–Ω—è—Ç–æ'
#         #@doctors = Doctor.all
#         #flash[:alert] = msg
#         #render :new
#
#         render turbo_stream: turbo_stream.append(:notices, partial: 'notices/notice', locals: { notices: msg, key: 'danger' })
#       end
#   end
#
#   #
#   # def create
#   #   @appointment = current_user.appointments.build(appointment_params)
#   #   if @appointment.save
#   #     send_telegram_confirmation(@appointment)
#   #     schedule_appointment_reminder(@appointment)
#   #     redirect_to @appointment, notice: '–ó–∞–ø–∏—Å—å –Ω–∞ –ø—Ä–∏–µ–º —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞.'
#   #   else
#   #     msg = '–í—ã–±—Ä–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è —É–∂–µ –∑–∞–Ω—è—Ç–æ'
#   #     render turbo_stream: turbo_stream.append(:notices, partial: 'notices/notice', locals: { notices: msg, key: 'danger' })
#   #   end
#   # end
#
#   def update
#     @appointment = Appointment.find(params[:id])
#     if @appointment.update(appointment_params)
#       redirect_to appointment_path, notice: '–ó–∞–ø–∏—Å—å –Ω–∞ –ø—Ä–∏–µ–º —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞.'
#     else
#       render :edit
#     end
#   end
#
#   def destroy
#     @appointment = Appointment.find(params[:id])
#     @appointment.destroy!
#     redirect_to appointments_path
#   end
#
#
#   private
#
#   def appointment_params
#     params.require(:appointment).permit(:appointment_date, :status, :problem_description, :age, :doctor_id, :info, :problem_id, :start_time, :end_time)
#   end
#
#       def user_params
#         params.require(:appointment).permit(:email, :username, :password, :password_confirmation)
#       end
#
#   def set_problems
#     @problems = {
#       0 => "–ü—Ä–æ–±–ª–µ–º–∞ –∏–ª–∏ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏–µ",
#       1 => "–ü–æ—Å—Ç–æ—è–Ω–Ω–æ —É—Å—Ç–∞—é—Ç –≥–ª–∞–∑–∞",
#       2 => "–ë–ª–∏–∑–æ—Ä—É–∫–æ—Å—Ç—å",
#       3 => "–î–∞–ª—å–Ω–æ–∑–æ—Ä–∫–æ—Å—Ç—å",
#       4 => "–ì–ª–∞—É–∫–æ–º–∞",
#       5 => "–ö–∞—Ç–∞—Ä–∞–∫—Ç–∞",
#       6 => "–ö–æ–Ω—ä—é–Ω–∫—Ç–∏–≤–∏—Ç",
#       7 => "–î—Ä—É–≥–æ–µ"
#     }
#   end
#
#   private
#
#   # def send_telegram_confirmation(appointment)
#   #   bot = Telegram::Bot::Client.new(ENV['TELEGRAM_BOT_API_TOKEN'])
#   #   message = "–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ –ø—Ä–∏–µ–º –∫ #{appointment.doctor.name} –Ω–∞ #{appointment.start_time.strftime('%Y-%m-%d %H:%M')}."
#   #   bot.api.send_message(chat_id: appointment.user.chat_id, text: message)
#   # end
#   def send_telegram_confirmation(appointment)
#     if appointment.user.telegram_chat_id.present?
#       bot = ::Telegram::Bot::Client.new(ENV['TELEGRAM_BOT_API_TOKEN'])
#       message = "–í–∞—à–∞ –∑–∞–ø–∏—Å—å –Ω–∞ –ø—Ä–∏–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞: #{appointment.details}"
#       bot.api.send_message(chat_id: appointment.user.telegram_chat_id, text: message)
#     else
#       Rails.logger.info "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å #{appointment.user.id} –Ω–µ –∏–º–µ–µ—Ç telegram_chat_id, —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ."
#     end
#   end
#
#   def schedule_appointment_reminder(appointment)
#     reminder_time = appointment.start_time - 1.hour # –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞ 1 —á–∞—Å –¥–æ –ø—Ä–∏–µ–º–∞
#     ReminderJob.set(wait_until: reminder_time).perform_later(appointment.id)
#   end
#
#
# end
#


class AppointmentsController < ApplicationController
  before_action :authenticate_user!, only: [:new, :create, :edit, :update, :destroy, :index]
  before_action :set_problems, only: [:show, :edit, :update, :destroy]

  def index
    @appointments = current_user.appointments.includes(:doctor).all
  end

  def show
    @appointment = Appointment.find(params[:id])
  end

  def new
    @appointment = Appointment.new
    @doctors = Doctor.all
  end

  def edit
    @appointment = Appointment.find(params[:id])
    @doctors = Doctor.all
  end

  def create
    @appointment = current_user.appointments.build(appointment_params)
    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –∫—Ä–∞—Ç–Ω–æ 30 –º–∏–Ω—É—Ç–∞–º
    unless @appointment.start_time.min % 30 == 0
      @appointment.errors.add(:start_time, "–í—Ä–µ–º—è –∑–∞–ø–∏—Å–∏ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∫—Ä–∞—Ç–Ω—ã–º 30 –º–∏–Ω—É—Ç–∞–º")
      render turbo_stream: turbo_stream.append(:notices, partial: 'notices/notice', locals: { notices: @appointment.errors.full_messages, key: 'danger' }) and return
    end
    if @appointment.save
      msg = "‚úÖ *–ó–∞–ø–∏—Å—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!*\n\nüìÖ *–î–∞—Ç–∞:* #{@appointment.start_time.strftime('%d.%m.%Y')}\nüïí *–í—Ä–µ–º—è:* #{@appointment.start_time.strftime('%H:%M')}\n\n–î–æ –≤—Å—Ç—Ä–µ—á–∏!"
      # binding.pry
      # –ü–µ—Ä–µ–¥–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–∞–∫ –∏–º–µ–Ω–æ–≤–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
      TelegramService.call(user: current_user, message: msg)
      redirect_to @appointment, notice: '–ó–∞–ø–∏—Å—å –Ω–∞ –ø—Ä–∏–µ–º —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞.'
    else
      render turbo_stream: turbo_stream.append(:notices, partial: 'notices/notice', locals: { notices: @appointment.errors.full_messages, key: 'danger' })
    end
  end


  def update
    @appointment = Appointment.find(params[:id])
    if @appointment.update(appointment_params)
      redirect_to appointment_path, notice: '–ó–∞–ø–∏—Å—å –Ω–∞ –ø—Ä–∏–µ–º —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞.'
    else
      render :edit
    end
  end

  def destroy
    @appointment = Appointment.find(params[:id])
    @appointment.destroy!
    redirect_to appointments_path
  end

  private

  def appointment_params
    params.require(:appointment).permit(:appointment_date, :status, :problem_description, :age, :doctor_id, :info, :problem_id, :start_time, :end_time)
  end

  def set_problems
    @problems = {
      0 => "–ü—Ä–æ–±–ª–µ–º–∞ –∏–ª–∏ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏–µ",
      1 => "–ü–æ—Å—Ç–æ—è–Ω–Ω–æ —É—Å—Ç–∞—é—Ç –≥–ª–∞–∑–∞",
      2 => "–ë–ª–∏–∑–æ—Ä—É–∫–æ—Å—Ç—å",
      3 => "–î–∞–ª—å–Ω–æ–∑–æ—Ä–∫–æ—Å—Ç—å",
      4 => "–ì–ª–∞—É–∫–æ–º–∞",
      5 => "–ö–∞—Ç–∞—Ä–∞–∫—Ç–∞",
      6 => "–ö–æ–Ω—ä—é–Ω–∫—Ç–∏–≤–∏—Ç",
      7 => "–î—Ä—É–≥–æ–µ"
    }
  end

  # def send_telegram_confirmation
  #   if @appointment.user.telegram_chat_id.present?
  #     bot = Telegram::Bot::Client.new(ENV['TELEGRAM_BOT_API_TOKEN'])
  #     doctor = appointment.doctor
  #     message = "–í–∞—à–∞ –∑–∞–ø–∏—Å—å –Ω–∞ –ø—Ä–∏–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞: #{@appointment.start_time} - —Å –¥–æ–∫—Ç–æ—Ä–æ–º  #{doctor.name}"
  #     begin
  #       bot.api.send_message(chat_id: @appointment.user.telegram_chat_id, text: message)
  #     rescue Telegram::Bot::Exceptions::ResponseError => e
  #       Rails.logger.error "–û—à–∏–±–∫–∞ Telegram API: #{e.message}"
  #     end
  #   else
  #     Rails.logger.info "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å #{@appointment.user.id} –Ω–µ –∏–º–µ–µ—Ç telegram_chat_id, —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ."
  #   end
  # end
  #


  # def schedule_appointment_reminder
  #   # binding.pry
  #   reminder_time = appointment.start_time - 1.hour # –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞ 1 —á–∞—Å –¥–æ –ø—Ä–∏–µ–º–∞
  #   puts "Setting ReminderJob for appointment #{@appointment.id} at #{reminder_time}" # Debug output
  #
  #   ReminderJob.set(wait_until: reminder_time).perform_later(@appointment.id)
  #   puts "ReminderJob set" # Debug output
  #
  # end
end
