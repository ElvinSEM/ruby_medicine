# class AppointmentsController < ApplicationController
#   before_action :authenticate_user!, only: [:new, :create, :edit, :update, :destroy, :index]
#   before_action :set_problems, only: [:show, :edit, :update, :destroy]
#
#   def index
#     @appointments = current_user.appointments.includes(:doctor).all
#   end
#
#   def show
#     @appointment = Appointment.find(params[:id])
#   end
#
#   def new
#     @appointment = Appointment.new
#     @doctors = Doctor.all
#   end
#
#   def edit
#     @appointment = Appointment.find(params[:id])
#     @doctors = Doctor.all
#   end
#
#   def create
#     @appointment = current_user.appointments.build(appointment_params)
#     # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –∫—Ä–∞—Ç–Ω–æ 30 –º–∏–Ω—É—Ç–∞–º
#     unless @appointment.start_time.min % 30 == 0
#       @appointment.errors.add(:start_time, "–í—Ä–µ–º—è –∑–∞–ø–∏—Å–∏ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∫—Ä–∞—Ç–Ω—ã–º 30 –º–∏–Ω—É—Ç–∞–º")
#       render turbo_stream: turbo_stream.append(:notices, partial: 'notices/notice', locals: { notices: @appointment.errors.full_messages, key: 'danger' }) and return
#     end
#     if @appointment.save
#       msg = "‚úÖ *–ó–∞–ø–∏—Å—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!*\n\nüìÖ *–î–∞—Ç–∞:* #{@appointment.start_time.strftime('%d.%m.%Y')}\nüïí *–í—Ä–µ–º—è:* #{@appointment.start_time.strftime('%H:%M')}\n\n–î–æ –≤—Å—Ç—Ä–µ—á–∏!"
#       # binding.pry
#       # –ü–µ—Ä–µ–¥–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–∞–∫ –∏–º–µ–Ω–æ–≤–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
#       TelegramService.call(user: current_user, message: msg)
#       redirect_to @appointment, notice: '–ó–∞–ø–∏—Å—å –Ω–∞ –ø—Ä–∏–µ–º —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞.'
#     else
#       render turbo_stream: turbo_stream.append(:notices, partial: 'notices/notice', locals: { notices: @appointment.errors.full_messages, key: 'danger' })
#     end
#   end
#
#
#   def update
#     @appointment = Appointment.find(params[:id])
#     if @appointment.update(appointment_params)
#       redirect_to appointment_path, notice: '–ó–∞–ø–∏—Å—å –Ω–∞ –ø—Ä–∏–µ–º —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞.'
#     else
#       render :edit
#     end
#   end
#
#   def destroy
#     @appointment = Appointment.find(params[:id])
#     @appointment.destroy!
#     redirect_to appointments_path
#   end
#
#   private
#
#   def appointment_params
#     params.require(:appointment).permit(:appointment_date, :status, :problem_description, :age, :doctor_id, :info, :problem_id, :start_time, :end_time)
#   end
#
#   def set_problems
#     @problems = {
#       0 => "–ü—Ä–æ–±–ª–µ–º–∞ –∏–ª–∏ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏–µ",
#       1 => "–ü–æ—Å—Ç–æ—è–Ω–Ω–æ —É—Å—Ç–∞—é—Ç –≥–ª–∞–∑–∞",
#       2 => "–ë–ª–∏–∑–æ—Ä—É–∫–æ—Å—Ç—å",
#       3 => "–î–∞–ª—å–Ω–æ–∑–æ—Ä–∫–æ—Å—Ç—å",
#       4 => "–ì–ª–∞—É–∫–æ–º–∞",
#       5 => "–ö–∞—Ç–∞—Ä–∞–∫—Ç–∞",
#       6 => "–ö–æ–Ω—ä—é–Ω–∫—Ç–∏–≤–∏—Ç",
#       7 => "–î—Ä—É–≥–æ–µ"
#     }
#   end
# end
#
# class AppointmentsController < ApplicationController
#   before_action :authenticate_user!, only: [:new, :create, :edit, :update, :destroy, :index, :cancel]
#   before_action :set_appointment, only: [:show, :edit, :update, :destroy, :cancel]
#
#   def index
#     @appointments = current_user.appointments.includes(:doctor)
#   end
#
#   def show
#   end
#
#   def new
#     @appointment = Appointment.new
#     @doctors = Doctor.all
#   end
#
#   # def create
#   #   @appointment = current_user.appointments.build(appointment_params)
#   #
#   #   unless appointment_time_valid?
#   #     render_appointment_error('–í—Ä–µ–º—è –∑–∞–ø–∏—Å–∏ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∫—Ä–∞—Ç–Ω—ã–º 30 –º–∏–Ω—É—Ç–∞–º') and return
#   #   end
#   #
#   #   if @appointment.save
#   #     send_telegram_confirmation(@appointment, '‚úÖ –ó–∞–ø–∏—Å—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!')
#   #     redirect_to @appointment, notice: '–ó–∞–ø–∏—Å—å –Ω–∞ –ø—Ä–∏–µ–º —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞.'
#   #   else
#   #     render_appointment_error(@appointment.errors.full_messages)
#   #   end
#   # end
#
#   def create
#     @appointment = Appointment.new(appointment_params)
#     @appointment.user = current_user
#     @appointment.doctor = @doctor
#
#     if @doctor.available_on?(@appointment.appointment_date)
#       if @appointment.save
#         redirect_to @appointment, notice: '–ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞.'
#       else
#         render :new, status: :unprocessable_entity
#       end
#     else
#       # –í—Ä–∞—á –∑–∞–Ω—è—Ç - —É–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ —Ç–µ–ª–µ–≥—Ä–∞–º –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
#       send_doctor_unavailable_notification(current_user, @doctor)
#       redirect_to doctors_path, alert: "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—Å–µ —Å–ª–æ—Ç—ã —É —ç—Ç–æ–≥–æ –≤—Ä–∞—á–∞ –Ω–∞ —ç—Ç—É –¥–∞—Ç—É –∑–∞–Ω—è—Ç—ã. –ú—ã —É–≤–µ–¥–æ–º–∏–º –≤–∞—Å, –∫–∞–∫ —Ç–æ–ª—å–∫–æ –æ–Ω –æ—Å–≤–æ–±–æ–¥–∏—Ç—Å—è."
#     end
#   end
#
#   def edit
#     @doctors = Doctor.all
#   end
#
#   def update
#     if @appointment.update(appointment_params)
#       redirect_to @appointment, notice: '–ó–∞–ø–∏—Å—å –Ω–∞ –ø—Ä–∏–µ–º —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞.'
#     else
#       render :edit
#     end
#   end
#
#   def destroy
#     @appointment.destroy
#     redirect_to appointments_path, notice: '–ó–∞–ø–∏—Å—å –Ω–∞ –ø—Ä–∏–µ–º –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞.'
#   end
#
#   def cancel
#     # binding.pry  # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ—á–∫—É –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
#
#     if @appointment.update(status: 'cancelled')
#       send_telegram_confirmation(@appointment, '‚ùå –ó–∞–ø–∏—Å—å –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.')
#       redirect_to @appointment, notice: '–ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–∞.'
#     else
#       render_appointment_error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å.')
#     end
#   end
#
#   private
#
#
#   def send_doctor_unavailable_notification(user, doctor)
#     # –õ–æ–≥–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ —Ç–µ–ª–µ–≥—Ä–∞–º
#     TelegramNotifier.send_message(user.telegram_id, "–î–æ–∫—Ç–æ—Ä #{doctor.name} –∑–∞–Ω—è—Ç. –ú—ã —Å–æ–æ–±—â–∏–º –≤–∞–º, –∫–∞–∫ —Ç–æ–ª—å–∫–æ –æ–Ω —Å—Ç–∞–Ω–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω.")
#
#     # –£—Å—Ç–∞–Ω–æ–≤–∏–º –∑–∞–¥–∞—á—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∑–∞ –¥–µ–Ω—å –¥–æ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è
#     if doctor.next_available_date
#       NotifyUserJob.set(wait_until: doctor.next_available_date - 1.day).perform_later(user, doctor)
#     end
#   end
#
#
#
#   def appointment_params
#     params.require(:appointment).permit(:appointment_date, :status, :problem_description, :age, :doctor_id, :start_time, :end_time)
#   end
#
#   def set_appointment
#     @appointment = current_user.appointments.find(params[:id])
#   end
#
#   def appointment_time_valid?
#     @appointment.start_time.min % 30 == 0
#   end
#
#   def render_appointment_error(message)
#     render turbo_stream: turbo_stream.append(:notices, partial: 'notices/notice', locals: { notices: message, key: 'danger' })
#   end
#
#   def send_telegram_confirmation(appointment, message_prefix)
#     message = "#{message_prefix}\n\nüìÖ –î–∞—Ç–∞: #{appointment.start_time.strftime('%d.%m.%Y')}\nüïí –í—Ä–µ–º—è: #{appointment.start_time.strftime('%H:%M')}"
#     TelegramService.call(user: current_user, message: message)
#   end
# end



class AppointmentsController < ApplicationController
  before_action :authenticate_user!, only: [:new, :create, :edit, :update, :destroy, :index, :cancel]
  before_action :set_appointment, only: [:show, :edit, :update, :destroy, :cancel]
  before_action :set_doctor, only: [:create]

  def index
    @appointments = current_user.appointments.includes(:doctor)
  end

  def show
  end

  def new
    @appointment = Appointment.new
    @doctors = Doctor.all
  end

  def create
    @appointment = current_user.appointments.build(appointment_params)
    @appointment.doctor = @doctor

    if @appointment.save
      send_telegram_confirmation(@appointment, '‚úÖ –ó–∞–ø–∏—Å—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!')
      redirect_to @appointment, notice: '–ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞.'
    else
      render :new, status: :unprocessable_entity
    end
  end

  def edit
    @doctors = Doctor.all
  end

  def update
    if @appointment.update(appointment_params)
      redirect_to @appointment, notice: '–ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞.'
    else
      render :edit
    end
  end

  def destroy
    @appointment.destroy
    redirect_to appointments_path, notice: '–ó–∞–ø–∏—Å—å –Ω–∞ –ø—Ä–∏–µ–º –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞.'
  end

  def cancel
    if @appointment.update(status: 'cancelled')
      send_telegram_confirmation(@appointment, '‚ùå –ó–∞–ø–∏—Å—å –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.')
      redirect_to @appointment, notice: '–ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–∞.'
    else
      render_appointment_error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å.')
    end
  end

  private

  def set_doctor
    @doctor = Doctor.find(params[:appointment][:doctor_id])
  end

  def appointment_params
    params.require(:appointment).permit(:appointment_date, :status, :problem_description, :age, :doctor_id, :start_time, :end_time)
  end

  def set_appointment
    @appointment = current_user.appointments.find(params[:id])
  end

  def send_telegram_confirmation(appointment, message_prefix)
    message = "#{message_prefix}\n\nüìÖ –î–∞—Ç–∞: #{appointment.start_time.strftime('%d.%m.%Y')}\nüïí –í—Ä–µ–º—è: #{appointment.start_time.strftime('%H:%M')}"
    TelegramService.call(user: current_user, message: message)
  end
end
